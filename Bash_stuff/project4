#!/bin/bash

# Positional Parameters Informative Guide: An interactive program to help with learning/understanding positional parameters. This is 
# mainly a tool to help with me understanding this concept in bash and being able to apply it directly.

# Functions
menu_choices () {
    echo  '
    1) What is a positional parameter?
    2) Explanation of: $#
    3) Explanation of: $*
    4) Explanation of: $@
    5) Explanation of quoting
    6) Redisplay menu options
    7) Quit the program
    '
}

test_numargs () {
    echo "
        Number of arguments: $#
        \$# = $#
        \$1 = $1
        \$2 = $2
        \$3 = $3
        \$4 = $4"
    printf "\n"
}

# Display the welcome message and menu
echo '
    Welcome to the Positional Parameters Informative Guide!
    
    This program will help you reinforce the idea of positional 
    parameters in bash. The goal here is show off different 
    examples and explain things where necessary. This is a menu 
    driven program, see below for options:'
    menu_choices
    
# Variables
quit=0

# Main Program Loop
while [[ "$quit" -eq 0 ]]; do
    read -p "Enter a menu option: " menu_option     #Get the users menu option

    case "$menu_option" in
        1)    printf "%70s\n\n" 'Positional Parameters'
              printf "%119s\n\n" '- In Bash, positional parameters are special variables that represent arguments passed to a function or script.'
              printf "%121s\n\n" '- By default, bash only allows direct access to 1 - 9, but you can reference parameters beyond 9 using braces {}.'
              printf "%124s\n\n" '- Since these are variables, they are denoted with the $ and parameters can be accessed like $1, $2, $9, ${25}, etc.'
              printf "%108s\n\n" '- If you were to run a script like ( ./example arg1 arg2 ), arg1 is $1 while arg2 is $2 and so forth'
              ;;
    
        2)    printf "%61s\n\n" 'What is $# ?'
              printf "%103s\n\n" '- $# is a special parameter that represents the number of arguments passed to a script/function'
              printf "%97s\n\n" '- As an example, lets run a dummy function, pass some arguments, and see what $# shows us'
              printf "%125s\n" '- In particular, we will run a function called test_numargs and pass 3 arguments. The function will just display what'
              printf "%115s\n" 'values each of the positional parameters holds. We will invoke the function call like: test_numargs a b c'
              test_numargs a b c
	      printf "%124s\n" '- As you can see, providing three arguments "a, b, and c" had $# give us a value of 3. When displaying $# we can see'
              printf "%73s\n\n" 'that it gives us the correct number of arguments that we passed'
              ;;
                
        6)    printf "\n"
              echo "    Displaying Menu Options"
              menu_choices
              ;;
              
        *)    printf "\nInvalid option. Please enter an integer between (1-7)\n\n"
    esac
done 
